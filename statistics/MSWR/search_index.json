[["index.html", "Modern Statistics with R From wrangling and exploring data to inference and predictive modelling Welcome", " Modern Statistics with R From wrangling and exploring data to inference and predictive modelling Mans Thulin 2023-02-05 - Version 2.0.1 Welcome This is the online version of the book Modern Statistics with R. It is free to use, and always will be. Printed copies are available where books are sold (ISBN 9789152701515). The past decades have transformed the world of statistical data analysis, with new methods, new types of data, and new computational tools. The aim of Modern Statistics with R is to introduce you to key parts of the modern statistical toolkit. It teaches you: Data wrangling - importing, formatting, reshaping, merging, and filtering data in R. Exploratory data analysis - using visualisations and multivariate techniques to explore datasets. Statistical inference - modern methods for testing hypotheses and computing confidence intervals. Predictive modelling - regression models and machine learning methods for prediction, classification, and forecasting. Simulation - using simulation techniques for sample size computations and evaluations of statistical methods. Ethics in statistics - ethical issues and good statistical practice. R programming - writing code that is fast, readable, and (hopefully!) free from bugs. The book includes plenty of examples and more than 200 exercises with worked solutions. The datasets used for the examples and the exercises can be downloaded here. Navigate the book using the menu to the left - or download it as a pdf file or eBook. The digital version of the book is offered under the Creative Commons CC BY-NC-SA 4.0. license, meaning that you are free to redistribute and build upon the material for noncommercial purposes, as long as appropriate credit is given to the author. To cite this book, please use the following: Thulin, M. (2021). Modern Statistics with R. Eos Chasma Press. ISBN 9789152701515. "],["Introduction.html", "1 들어가며 1.1 R이란? 1.2 R 설치하기 1.3 RStudio 설치하기 1.4 레이텍 설치하기 1.5 Packages 설치하기 1.6 이 책에 대하여", " 1 들어가며 학습 목표 1. R의 장.단점을 할 수 있습니다. 2. R 프로그램을 설치 할 수 있습니다. 3. RStudio 프로그램을 설치할 수 있습니다. 4. 레이텍 프로그램을 설치 할 수 있습니다. 5. R 패키지를 설치 할 수 있습니다. 1.1 R이란? R의 환상의 세계에 오신 것을 환영합니다! R은 다른 통계 소프트웨어 패키지와 비교했을 때 장점이 매우 많습니다. 첫째, 무료이며 다목적이며 빠르고 현대적입니다. 둘째, 질문에 답하고 새로운 R 도구를 개발하는 데 도움이 되는 크고 친근한 사용자 커뮤니티가 있습니다. 셋째, 17,000개 이상의 애드온 패키지를 사용할 수 있는 R은 다른 통계 소프트웨어보다 더 많은 데이터 분석 기능을 제공합니다. 넷째, 정치학, 환경화학, 천문학과 같이 다양한 분야를 위한 전문 도구가 포함되며, 새로운 방법은 다른 프로그램에 도입되기 훨씬 전에 R에 도입됩니다. 다섯번째, R을 사용하면 동일한 분석을 두 번 이상 쉽게 반복할 수 있는 재현 가능한 연구 및 워크플로를 쉽게 구성할 수 있습니다. R은 다른 프로그래밍 언어와 다릅니다. 소프트웨어 엔지니어의 프로그래밍 작업을 위한 도구가 아니라 데이터 분석을 위한 도구로 통계학자가 개발했습니다. 처음부터 데이터를 처리하도록 설계되었으며 그 결과를 보여줍니다. 그러나 대화형 웹 페이지, 자동화된 보고서 및 API를 만드는 데 사용할 수 있을 만큼 유연합니다. R은 간단히 말해서 현재 데이터 분석을 위한 최고의 도구입니다. 그러나 R에게도 단점은 있습니다. 장점과 단점은 동전의 양면과도 같습니다. 그래서 우리는 장점을 극대화하고 단점 최소화 시키는 패러독스 메니지먼트 전략이 필요합니다. 1.2 R 설치하기 다운로드하기위해서R Project 웹사이트로 접속합니다. https://cran.r-project.org/mirrors.html 다운로드 미러, 즉 소프트웨어를 다운로드할 서버를 선택합니다. 가까운 거울을 선택하는 것이 좋습니다. 그런 다음 해당 링크를 따라 Linux1, Mac 또는 Windows용 R을 다운로드하도록 선택할 수 있습니다. [그림] 1.1. [그림] 1.1: A screenshot from the R download page at https://ftp.acc.umu.se/mirror/CRAN/ 다운로드해야 하는 R 버전을 (기본) 바이너리라고 합니다. 다운로드하고 실행하여 R을 설치하십시오. R의 64비트 및 32비트 버전에 대한 언급을 볼 수 있습니다. 최신 컴퓨터(이 경우 2010년 이후의 컴퓨터를 의미)를 사용하는 경우 64비트 버전을 사용해야 합니다. 1.3 RStudio 설치하기 이제 R 프로그래밍 언어를 설치했습니다. 코드를 쉽게 작성, 실행 및 디버그할 수 있는 통합 개발 환경 또는 줄여서 IDE를 사용하면 작업이 더 쉬워집니다. 이 책은 RStudio IDE와 함께 사용하도록 작성되었지만 99.9%는 ESS가 있는 Emacs 또는 Jupyter 노트북과 같은 다른 IDE에서도 똑같이 잘 작동합니다. RStudio를 다운로드하려면 RStudio 다운로드 페이지로 이동하십시오. https://rstudio.com/products/rstudio/download/#download 링크를 클릭하여 운영 체제용 설치 프로그램을 다운로드한 다음 실행합니다. 1.4 레이텍 설치하기 1.5 Packages 설치하기 R에는 수많은 기능이 포함되어 있지만 물론 이러한 기능은 데이터로 수행할 수 있는 모든 가능한 작업을 처리할 수 없습니다. 그것은 packages를 통해서 가능하게 해줍니다. 패키지는 R에 새로운 기능을 추가하는 함수 및 데이터 집합의 모음입니다. 데이터에 모호한 통계 테스트를 적용하시겠습니까? 데이터를 지도에 표시하시겠습니까? R에서 C++ 코드를 실행하시겠습니까? 데이터 처리 프로세스의 일부를 가속화하시겠습니까? 이를 위한 R 패키지가 있습니다. 사실, 17,000개 이상의 패키지와 그 수를 포함하여 여러분이 원하는 거의 모든 것을 위한 R 패키지가 있습니다. 모든 패키지는 R 커뮤니티, 즉 여러분과 저와 같은 사용자가 기여했습니다. 대부분의 R 패키지는 전 세계의 서버 네트워크(소위 mirrors)인 공식 R 저장소인 CRAN에서 사용할 수 있습니다. CRAN의 패키지는 게시되기 전에 확인되어 수행해야 하는 작업을 수행하고 악성 구성 요소를 포함하지 않는지 확인합니다. 따라서 CRAN에서 패키지를 다운로드하는 것은 일반적으로 안전한 것으로 간주됩니다. 이 장의 나머지 부분에서는 R에 그래픽 기능을 추가하는 ggplot2라는 패키지를 사용할 것입니다. CRAN에서 패키지를 설치하려면 RStudio 메뉴에서 Tools &gt; Install packages를 선택한 다음 다음을 작성할 수 있습니다. 나타나는 팝업 창의 텍스트 상자에 ggplot2 또는 다음 코드 행을 사용하십시오.: install.packages(&quot;ggplot2&quot;) 다운로드할 CRAN 미러 위치를 선택하라는 메뉴가 나타날 수 있습니다. 가장 가까운 것을 선택하거나 기본 옵션을 사용하십시오. 선택 사항은 다운로드 속도에 영향을 줄 수 있지만 대부분의 경우 큰 차이는 없습니다. 패키지용 폴더를 만들지 여부를 묻는 메시지가 표시될 수도 있으며 이에 동의해야 합니다. R이 패키지를 다운로드하고 설치하면 콘솔 패널에 여러 기술 메시지가 인쇄됩니다(성공적인 설치 중에 이러한 메시지가 표시되는 예는 ?? 섹션에서 찾을 수 있습니다). ggplot2은 R이 설치할 패키지 수에 따라 달라지므로 몇 분 정도 걸릴 수 있습니다. 설치가 성공적으로 완료되면 다음과 같은 메시지와 함께 완료됩니다.: * DONE (ggplot2) Or, on some systems, package ‘ggplot2’ successfully unpacked and MD5 sums checked 어떤 이유로 설치에 실패하면 일반적으로 (때로는 알 수 없는) 오류 메시지가 표시됩니다. 2.8 섹션에서 오류 문제 해결에 대한 자세한 내용을 읽을 수 있습니다. https://support.rstudio.com/hc/en-us/articles/200554786-Problem-Installing-Packages의 RStudio 지원 페이지에서 사용할 수 있는 패키지를 설치할 때 일반적인 문제 목록도 있습니다. 패키지를 설치한 후에도 아직 완료되지 않았습니다. 패키지가 설치되었을 수 있지만 해당 기능과 데이터 세트는 패키지를 로드할 때까지 사용할 수 없습니다. 새로운 R 세션을 시작합니다. 운 좋게도 library 기능을 사용하는 짧은 코드 한 줄로 수행됩니다2 스크립트 파일 맨 위에 두는 것이 좋습니다.: library(ggplot2) R 패키지 설치 및 업데이트에 대한 자세한 내용은 섹션에서 설명합니다. ??. 1.6 이 책에 대하여 이 책은 Mans Thulin이 에든버러 대학교, 웁살라 대학교, 달라나 대학교, 스웨덴 농업과학 대학교, 카롤린스카 연구소에서 강좌를 위해 만든 강의 노트와 자료에서 탄생했습니다. 교과서, 자가 학습 또는 R의 참조 설명서로 사용할 수 있습니다. 프로그래밍에 대한 배경 지식이 없다고 가정합니다. 이 책은 연속해서 읽어야 한다는 의도로 쓴 책이 아닙니다. 그보다는 R을 탐색할 때 다음에 해야 할 일에 대한 가이드 역할을 하기 위한 것입니다. 데이터 분석 및 데이터 랭글링과 관련된 서로 다른 주제를 논의하는 대화라고 생각하십시오. 때때로 Mans Thulin은 이야기를 하고, 개념을 소개하고, 질문을 합니다. 때때로 당신은 말하고, 연습하고, R이 제공하는 모든 것을 발견하게 될 것입니다. R을 배우는 가장 좋은 방법은 R을 사용하는 것입니다. 적극적인 학습을 위해 노력해야 합니다. 즉, R에 더 많은 시간을 할애하고 책에 코를 박는 시간을 줄여야 합니다. 우리는 함께 탐구적인 접근 방식을 위해 노력할 것입니다. 여기에서 텍스트는 발견으로 안내하고 연습은 더 나아가도록 도전합니다. 이것이 Mans Thulin이 2008년부터 R을 가르치고 있는 방법이며, 이것이 당신에게 잘 맞는 방법을 찾을 수 있는 방법이 되기를 바랍니다. 이 책에는 200개 이상의 연습 문제가 포함되어 있습니다. 윤리적 문제에 대한 많은 개방형 질문을 제외하고 모든 연습에는 R 코드가 포함됩니다. 이러한 연습에는 모두 효과적인 솔루션이 있습니다. 모든 연습문제는 이 책에서 지원하고자 하는 학습 접근 방식의 핵심이므로 실제로 연습하는 것이 좋습니다. R을 사용하여 문제를 해결하십시오. 연습을 마쳤으면(또는 시도했지만 끝내지 못한 경우) 제안된 솔루션을 읽어보십시오. 제안된 솔루션은 귀하가 생각한 것과 다를 수 있으며 때때로 흥미로운 의견을 포함할 수 있습니다. 제안된 솔루션을 대화의 일부로 취급하십시오. 연습 문제를 풀고 솔루션을 책 뒷부분에 있는 솔루션과 비교하면 R 작업 경험이 점점 더 많아지고 문제 해결 방법에 대한 예제 라이브러리를 구축할 수 있습니다. R에 관한 일부 책은 R이 더 깊은 데이터 분석을 위해 제공해야 하는 많은 훌륭한 도구를 무시하고 전적으로 데이터 과학(데이터 랭글링 및 탐색적 데이터 분석)에 초점을 맞춥니다. 다른 사람들은 예측 모델링이나 고전적 통계에 초점을 맞추지만 현대 통계 작업의 중요한 부분인 데이터 처리를 무시합니다. 통계적 방법에 대한 많은 입문서는 전산 통계의 최근 발전에 너무 적은 초점을 두고 구식이 된 방법을 옹호합니다. 통계 실무에서 윤리적 문제에 대한 논의가 포함된 책이 너무 적습니다. 이 책은 이러한 모든 주제를 다루고 이러한 모든 작업을 위한 최첨단 도구를 보여 주는 것을 목표로 합니다. 데이터 과학 및 (현대!) 고전 통계, 예측 모델링 및 머신 러닝을 다루고 시뮬레이션과 같은 다른 입문서에서는 거의 나타나지 않는 중요한 주제를 다룹니다. R 4.0 이상용으로 작성되었으며 data.table, dplyr, ggplot2 및 caret와 같은 강력한 애드온 패키지를 알려줍니다. 이 책은 다음과 같이 구성되어 있습니다. Chapter 2은 기본 개념을 다루고 R을 사용하여 기술 통계를 계산하고 보기 좋은 도표를 만드는 방법을 보여줍니다. Chapter ??은 R에서 데이터를 가져오고 처리하는 방법과 일상적인 통계 분석을 수행하는 방법에 관한 것입니다. Chapter ??은 통계 그래픽을 사용한 탐색적 데이터 분석과 주성분 분석 및 클러스터링과 같은 자율 학습 기술을 다룹니다. 또한 사용할 수 있는 강력한 마크업 언어인 R Markdown에 대한 소개도 포함되어 있습니다. 보고서를 생성합니다. Chapter ??에서는 필터링, 재정렬 및 데이터 집합 병합을 비롯한 지저분한 데이터와 다양한 데이터 유형을 처리하는 방법을 설명합니다. Chapter ??은 R 프로그래밍을 다루고 반복, 조건문 및 함수와 같은 개념을 다룹니다. Chapters ??-??는 어떤 순서로든 읽을 수 있습니다. Chapter ??은 추정, 신뢰 구간, 가설 검정 및 샘플 크기 계산과 같은 고전적인 통계 주제와 관련이 있습니다. 빈도주의 방법은 약한 정보 사전을 활용하는 베이지안 방법과 함께 제시됩니다. 또한 부트스트랩 및 순열 테스트와 같은 전산 통계의 시뮬레이션 및 중요한 주제를 다룹니다. Chapter ??에서는 선형, 일반화 선형 및 혼합 모델을 포함한 다양한 회귀 모델을 다룹니다. 서로 다른 종류의 검열된 데이터를 분석하기 위한 생존 모델 및 방법과 일치하는 샘플을 만드는 방법도 포함되어 있습니다. Chapter ??은 정규화 회귀, 기계 학습 기술, 시계열 모델을 사용한 예측 소개를 포함한 예측 모델링을 다룹니다. 교차 유효성 검사 및 예측 모델의 성능을 평가하는 방법에 많은 초점을 둡니다. Chapter ??에서는 병렬 컴퓨팅, 행렬 계산 및 다른 프로그래밍 언어와의 통합을 비롯한 고급 주제에 대한 개요를 제공합니다. Chapter ??에서는 디버깅, 즉 코드에서 오류를 발견하고 수정하는 방법을 다룹니다. 여기에는 25개 이상의 일반적인 오류 및 경고 메시지 목록과 이를 해결하는 방법에 대한 조언이 포함되어 있습니다. Chapter ??에서는 Chapters ??-??에서 사용되는 방법의 일부 수학적 측면을 다룹니다. 마지막으로 Chapter ??에는 이 책의 모든 연습 문제에 대한 완전한 솔루션이 포함되어 있습니다. 예제 및 연습에 사용되는 데이터 세트는 다음에서 다운로드할 수 있습니다. http://www.modernstatisticswithr.com/data.zip R 패키지에 데이터 세트를 넣지 않기로 결정했습니다. 실제 작업에 R을 사용할 때마다 파일에서 데이터를 로드하는 연습을 하기를 원하기 때문입니다. 이 책은 인쇄본과 오픈 액세스 온라인 책으로 모두 사용할 수 있습니다. 책의 디지털 버전은 크리에이티브 커먼즈CC BY-NC-SA 4.0. 라이선스에 따라 제공됩니다. 저자(Mans Thulin)에게 적절한 크레딧이 제공되는 한 비상업적 목적으로 자료를 재배포하고 구축할 수 있습니다. 책의 출처는 GitHub 페이지(https://github.com/mthulin/mswr-book)에서 확인할 수 있습니다. 많은 Linux 배포판의 경우 R은 패키지 관리 시스템에서도 사용할 수 있습니다.↩︎ library를 사용하면 사람들이 R 패키지를 libraries로 잘못 참조하게 됩니다. 라이브러리를 패키지를 저장하는 장소로 생각하고 라이브러리를 호출하는 것은 라이브러리로 이동하여 패키지를 가져오는 것을 의미합니다.↩︎ "],["thebasics.html", "2 The basics 2.1 A first look at RStudio 2.2 Running R code 2.3 Variables and functions 2.4 Descriptive statistics 2.5 Plotting numerical data 2.6 Plotting categorical data 2.7 Saving your plot 2.8 Troubleshooting", " 2 The basics 처음부터 시작합시다. 이 장은 R에 대한 소개 역할을 합니다. R 및 RStudio를 설치하고 사용하는 방법을 보여줍니다. 이 장의 자료로 작업한 후 다음을 수행할 수 있습니다. 재사용 가능한 R 스크립트 생성, 데이터를 R에 저장, R의 함수를 사용하여 데이터를 분석하고, R에 추가 기능을 추가하는 애드온 패키지 설치, 평균 및 중앙값과 같은 기술 통계를 계산합니다. 수학적 계산을 하고, 산점도, 상자 그림, 히스토그램 및 막대 차트를 포함하여 보기 좋은 그림을 만듭니다. 코드에서 오류를 찾으십시오. 2.1 A first look at RStudio RStudio를 시작하면 3개 또는 4개의 패널이 표시됩니다. [그림] 2.1: The four RStudio panels. 가져오고 생성한 데이터 목록을 찾을 수 있는 Environment 패널. 사용 가능한 파일 목록을 볼 수 있는 Files, Plots 및 Help 패널은 생성한 그래프를 볼 수 있으며 R의 다른 부분에 대한 도움말 문서를 찾을 수 있습니다. 코드 실행에 사용되는 Console 패널. 여기에서 처음 몇 가지 예부터 시작하겠습니다. 코드 작성에 사용되는 Script 패널. 여기에서 작업하는 데 대부분의 시간을 보냅니다. R 코드가 포함된 파일을 열어 RStudio를 시작하면 Script 패널이 표시되고 그렇지 않으면 표시되지 않습니다. 이 시점에서 표시되지 않더라도 걱정하지 마세요. 곧 여는 방법을 배우게 될 것입니다. Console 패널에는 실행 중인 R 버전에 대한 정보를 보여주는 R 시작 메시지가 포함됩니다.3: R version 4.1.0 (2021-05-18) -- &quot;Camp Pontanezen&quot; Copyright (C) 2021 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type &#39;license()&#39; or &#39;licence()&#39; for distribution details. Natural language support but running in an English locale R is a collaborative project with many contributors. Type &#39;contributors()&#39; for more information and &#39;citation()&#39; on how to cite R or R packages in publications. Type &#39;demo()&#39; for some demos, &#39;help()&#39; for on-line help, or &#39;help.start()&#39; for an HTML browser interface to help. Type &#39;q()&#39; to quit R. 테두리를 클릭하고 드래그하거나 각 패널의 오른쪽 상단 모서리에 있는 최소화/최대화 버튼을 사용하여 원하는 대로 패널 크기를 조정할 수 있습니다. RStudio를 종료하면 작업 공간을 저장할지 여부를 묻는 메시지가 표시됩니다. 즉, 작업한 데이터가 저장되어 다음에 R을 실행할 때 사용할 수 있습니다. 좋은 생각처럼 들릴 수 있습니다. 그러나 일반적으로 작업 공간을 저장하지 않는 것이 좋습니다. 나중에 문제가 발생하는 경우가 많기 때문입니다. 거의 항상 다음 R 세션에서 작업한 코드를 다시 실행하는 것이 훨씬 더 나은 아이디어입니다. 2.2 Running R code R에서 수행하는 모든 작업은 code를 중심으로 이루어집니다. 코드에는 컴퓨터가 처리, 분석 및 조작하는 방법에 대한 지침이 포함됩니다. 4 data. 따라서 각 코드 라인은 R에게 무언가를 하라고 지시합니다: 평균값을 계산하고, 플롯을 생성하고, 데이터 세트를 정렬하거나, 다른 것. 텍스트 전반에 걸쳐 콘솔 패널에 붙여넣을 수 있는 코드 덩어리가 있습니다. 다음은 이러한 코드 청크의 첫 번째 예입니다. 콘솔에 코드를 입력하거나 복사하고 키보드에서 Enter 키를 누릅니다. 1+1 코드 청크에는 여러 줄이 포함되는 경우가 많습니다. 이 책의 디지털 버전에서 두 줄을 모두 선택하여 복사하고 동시에 콘솔에 직접 붙여넣을 수 있습니다. 2*2 1+2*3-5 보시다시피 Console 패널에 코드를 입력하고 Enter 키를 누르면 R runs(또는 executes_)가 코드를 실행하고 응답을 반환합니다. 시작하려면 첫 번째 연습에서 계산을 수행하는 코드를 작성해야 합니다. 이 문제에 대한 솔루션과 다른 연습 문제는 책의 끝 부분 ?? 장에서 찾을 수 있습니다. \\[\\sim\\] Exercise 2.1 R을 사용하여 처음 10개 정수의 곱을 계산합니다.: \\(1\\cdot 2\\cdot 3\\cdot 4\\cdot 5\\cdot 6\\cdot 7\\cdot 8\\cdot 9\\cdot 10\\). (Click here to go to the solution.) 2.2.1 R scripts 콘솔 패널에서 작업할 때5 키보드의 위쪽 화살표 ↑를 사용하여 이전에 사용한 코드 줄을 검색할 수 있습니다. 그러나 R 코드로 작업하는 훨씬 더 좋은 방법이 있습니다. script 파일에 넣는 것입니다. R 코드가 포함된 파일로 저장한 다음 원할 때마다 다시 실행할 수 있습니다. RStudio에서 새 스크립트 파일을 만들려면 키보드에서 Ctrl+Shift+N을 누르거나 menu에서 File &gt; New File &gt; R Script를 선택합니다. 이렇게 하면 새 스크립트 패널(또는 이미 열려 있는 경우 스크립트 패널의 새 탭)이 열립니다. 그런 다음 스크립트 패널에서 코드 작성을 시작할 수 있습니다. 예를 들어 다음을 시도하십시오.: 1+1 2*2 1+2*3-5 (1+2)*3-5 스크립트 패널에서 Enter 키를 누르면 코드를 실행하는 대신 새 줄을 삽입합니다. 스크립트 패널은 코드를 실행하는 대신 작성하는 데 사용되기 때문입니다. 코드를 실제로 실행하려면 콘솔 패널로 코드를 보내야 합니다. 이는 여러 가지 방법으로 수행할 수 있습니다. 그들에게 당신이 선호하는 것을 보도록 합시다. 전체 스크립트를 실행하려면 다음 중 하나를 수행합니다. 스크립트 패널의 오른쪽 상단에 있는 소스 버튼을 누릅니다. 키보드에서 Ctrl+Shift+Enter를 누릅니다. 키보드에서 Ctrl+Alt+Enter를 눌러 콘솔에서 코드 및 출력을 인쇄하지 않고 코드를 실행합니다. 스크립트의 일부를 실행하려면 먼저 실행하려는 행을 선택하십시오. 마우스를 사용하여 강조 표시합니다. 그런 다음 다음 중 하나를 수행합니다. 스크립트 패널의 오른쪽 상단에 있는 실행 버튼을 누릅니다. 키보드에서 Ctrl+Enter를 누릅니다(저는 보통 이렇게 합니다!). 스크립트를 저장하려면 저장 아이콘을 클릭하고 메뉴에서 파일 &gt; 저장을 선택하거나 Ctrl+S를 누릅니다. R 스크립트 파일은 파일 확장자 .R을 가져야 합니다. My_first_R_script.R. 작업을 자주 저장하고 이 책에 있는 모든 예제와 연습에 대한 코드를 저장하는 것을 잊지 마십시오. 나중에 이전 예제를 다시 방문하여 어떤 작업이 수행되었는지 확인하고 싶을 것입니다. 2.3 Variables and functions 물론 R은 단순한 멋진 계산기 그 이상입니다. 잠재력을 최대한 활용하려면 variables(데이터 저장에 사용) 및 functions(데이터 작업에 사용)의 두 가지 주요 개념에 대해 논의해야 합니다. 2.3.1 Storing data 데이터가 없으면 데이터 분석도 없습니다. 그렇다면 R에서 어떻게 데이터를 저장하고 읽을 수 있을까요? 답은 variables를 사용한다는 것입니다. 변수는 코드를 작성할 때 데이터 세트를 참조할 수 있도록 데이터를 저장하는 데 사용되는 이름입니다. 변수라는 이름에서 알 수 있듯이 저장되는 내용은 시간이 지남에 따라 변경될 수 있습니다.6. The code x &lt;- 4 값 4를 variable x에 assign하는 데 사용됩니다. “4를 x에 할당”으로 읽습니다. &lt;- 부분은 작음 기호(&lt;)와 하이픈(-) 사이에 공백 없이 작성하여 만듭니다.7. 이제 콘솔에 x를 입력하면 R은 4를 반환합니다. 음, 거의. 실제로 R은 다음과 같은 다소 애매한 출력을 반환합니다.: [1] 4 4의 의미는 명확합니다. 4입니다. [1] 부분이 의미하는 바는 곧 다시 설명하겠습니다. 이제 x라는 변수를 만들고 값(4)을 할당했으므로 x는 다시 사용할 때마다 값 4를 갖게 됩니다. 이것은 수학 공식처럼 작동합니다. 예를 들어 값 \\(x=4\\)를 공식 \\(x+1\\)에 삽입할 수 있습니다. 다음 두 줄의 코드는 \\(x+1=4+1=5\\) 및 \\(x+x=4+4=8\\)를 계산합니다.: x + 1 x + x x에 값을 할당하면 RStudio의 환경 패널에 나타나 변수 이름과 값을 모두 볼 수 있습니다. 할당 x &lt;- 4의 왼쪽은 항상 변수의 이름이지만 오른쪽은 변수에 저장할 일종의 개체를 생성하는 코드 조각일 수 있습니다. 예를 들어 오른쪽에서 계산을 수행한 다음 결과를 변수에 저장할 수 있습니다.: x &lt;- 1 + 2 + 3 + 4 R은 먼저 오른쪽 전체를 평가하며, 이 경우 1+2+3+4를 계산한 다음 결과(10)를 ’x’에 할당합니다. 이전에 x에 할당된 값(예: 4)은 이제 10으로 대체되었습니다. 코드 조각이 실행된 후 영향을 받는 변수의 값이 변경됩니다. 실행을 되돌리고 ’4’를 다시 가져올 방법이 없습니다. 처음에 이를 생성한 코드를 다시 실행하기 위해 저장하십시오. 위의 코드에서 예를 들어 숫자와 더하기 기호 사이에 공백을 추가했음을 알 수 있습니다. 이는 단순히 가독성을 높이기 위한 것입니다. 코드는 공백 없이도 잘 작동합니다.: x&lt;-1+2+3+4 또는 일부 장소에는 공백이 있지만 다른 장소에는 공백이 없습니다.: x&lt;- 1+2+3 + 4 단, &lt;- 화살표 중간에는 공백을 넣을 수 없습니다. 다음은 x에 값을 할당하지 않습니다.: x &lt;- 1 + 2 + 3 + 4 해당 코드를 실행하면 출력이 ’FALSE’로 렌더링되었습니다. 이는 공백이 있는 &lt; -가 R의 &lt;-와 다른 의미를 갖기 때문입니다. 이에 대해서는 다음 장에서 다시 설명하겠습니다. 드물게 변수 이름이 오른쪽에 오도록 화살표 방향을 전환할 수 있습니다. 이것은 오른쪽 할당이라고 하며 잘 작동합니다.: 2 + 2 -&gt; y Later on, we’ll see plenty of examples where right-assignment comes in handy. \\[\\sim\\] Exercise 2.2 합계 \\(924+124\\)를 계산하고 그 결과를 ’a’라는 변수에 할당합니다. \\(a\\cdot a\\)를 계산합니다. (Click here to go to the solution.) 2.3.2 What’s in a name? 이제 변수에 값을 할당하는 방법을 알게 되었습니다. 하지만 변수를 뭐라고 불러야 할까요? 물론 이전 섹션의 예를 따라 x, y, a 및 b와 같은 변수 이름을 지정할 수 있습니다. 그러나 한 글자 이름을 사용할 필요는 없으며 가독성을 위해 변수에 더 많은 정보를 제공하는 이름을 지정하는 것이 좋습니다. 다음 두 코드 청크를 비교하십시오.: y &lt;- 100 z &lt;- 20 x &lt;- y - z and income &lt;- 100 taxes &lt;- 20 net_income &lt;- income - taxes 두 청크 모두 오류 없이 실행되고 동일한 결과를 산출하지만 두 청크 사이에는 큰 차이가 있습니다. 첫 번째 청크는 불투명합니다. 코드는 실제로 계산하는 것을 이해하는 데 전혀 도움이 되지 않습니다. 반면에 두 번째 청크가 소득에서 세금을 빼서 순소득을 계산하는 데 사용된다는 것은 완전히 분명합니다. 명확한 목적 없이 뚫을 수 없는 코드를 생성하는 청크 1 유형 R 사용자가 되고 싶지는 않습니다. 각 줄의 의도가 분명한 명확하고 읽기 쉬운 코드를 작성하는 두 가지 유형의 R 사용자가 되기를 원합니다. 저에게서 가져가세요. 몇 년 동안 저는 덩치 큰 남자였습니다. 유용한 코드를 많이 작성할 수 있었지만 재사용하거나 일부 버그를 수정하기 위해 이전 코드로 돌아가야 할 때마다 각 줄이 수행해야 하는 작업을 이해하는 데 어려움을 겪었습니다. 청크 투맨으로서의 나의 새로운 삶은 모든 면에서 더 좋습니다. 그래서, 이름은 무엇입니까? 셰익스피어의 발코니에 묶인 Juliet는 우리가 다른 이름으로 장미라고 부르는 것이 달콤한 냄새가 날 것이라고 믿게 만들 것입니다. R 사례로 번역하면 변수에 대해 어떤 이름을 선택하든 상관없이 코드가 잘 실행된다는 의미입니다. 그러나 당신이나 다른 누군가가 당신의 코드를 읽을 때 x나 my_new_variable_5가 아니라 장미를 장미라고 부르면 큰 도움이 될 것입니다. R은 대소문자를 구분합니다. 즉, my_variable, MY_VARIABLE, My_Variable 및 mY_VariABle은 다른 변수로 취급됩니다. 변수에 저장된 데이터에 액세스하려면 올바른 위치에 소문자와 대문자를 포함하여 정확한 이름을 사용해야 합니다. 잘못된 변수 이름을 쓰는 것은 R 프로그래밍에서 가장 흔한 오류 중 하나입니다. net_income에서 했던 것처럼 여러 단어로 변수 이름을 구성하고 싶은 경우가 자주 있을 것입니다. 그러나 R은 변수 이름에 공백을 허용하지 않으므로 ’순이익’은 유효한 변수 이름이 아닙니다. 변수 이름을 지정하는 데 사용할 수 있는 몇 가지 명명 규칙이 있습니다.: snake_case, 여기서 단어는 밑줄(_)로 구분됩니다. 예: household_net_income. camelCase 또는 CamelCase, 각 새 단어는 대문자로 시작합니다. 예: ‘househouldNetIncome’ 또는 ‘HousehouldNetIncome’. period.case, 여기서 각 단어는 마침표(.)로 구분됩니다. 이것은 R에서 많이 사용되지만 이름 중간의 마침표는 고급 사례에서 다른 의미를 가질 수 있으므로 변수 이름을 지정하는 데 사용하지 않는 것이 좋습니다8. 예: household.net.income. ‘concatenatedwordscase’, 소문자만 사용하여 단어를 연결합니다. 이 규칙의 단점은 변수 이름을 읽기 어렵게 만들 수 있다는 것입니다. 예: ‘가계 순소득’ SCREAMING_SNAKE_CASE, 요즘 유닉스 셸 스크립트에서 주로 사용하는 항목. 원하는 경우 R에서 사용할 수 있지만 다른 사람들이 당신이 화가 났거나 매우 흥분했거나 완전히 화가 났다고 생각하게 할 위험이 있습니다. 당신이 원하는대로 만드십시오.]. 예: HOUSEHOULD_NET_INCOME. 공백, -, +, *, :, =, ! 및 $를 포함한 일부 문자는 R에서 다른 용도로 사용되므로 변수 이름에 사용할 수 없습니다. 예를 들어 더하기 기호 +는 (예상한 대로) 추가에 사용되므로 변수 이름에 사용하도록 허용하면 모든 종류의 혼란이 발생합니다. 또한 변수 이름은 숫자로 시작할 수 없습니다. 그 외에 변수 이름을 지정하는 방법과 사용하는 규칙은 사용자에게 달려 있습니다. 기억하세요. 변수는 어떤 이름을 지정하든 관계없이 달콤한 냄새가 나지만 좋은 명명 규칙을 사용하면 가독성이 향상됩니다9. 코드의 가독성을 높이는 또 다른 좋은 방법은 comments를 사용하는 것입니다. 주석은 R에서 무시되는 ’#’으로 표시된 텍스트입니다. 따라서 코드를 읽는 사람들(미래의 당신 포함)에게 무슨 일이 일어나고 있는지 설명하고 방법에 대한 지침을 추가하는 데 사용할 수 있습니다. 코드를 사용합니다. 주석은 별도의 줄이나 코드 줄 끝에 놓을 수 있습니다. 다음은 예입니다. ############################################################# # This lovely little code snippet can be used to compute # # your net income. # ############################################################# # Set income and taxes: income &lt;- 100 # Replace 100 with your income taxes &lt;- 20 # Replace 20 with how much taxes you pay # Compute your net income: net_income &lt;- income - taxes # Voilà! RStudio의 스크립트 패널에서 키보드에서 Ctrl+Shift+C를 눌러 행에 주석을 달거나 주석을 제거(즉, # 기호 제거)할 수 있습니다. 이것은 여러 줄을 주석 처리하거나 제거하려는 경우에 특히 유용합니다. 간단히 줄을 선택하고 Ctrl+Shift+C를 누르십시오. \\[\\sim\\] Exercise 2.3 Answer the following questions: 변수 이름에 유효하지 않은 문자를 사용하면 어떻게 됩니까? 예를 들어보십시오. 다음과 같은: net income &lt;- income - taxes net-income &lt;- income - taxes ca$h &lt;- income - taxes R 코드를 주석으로 넣으면 어떻게 되나요? 예를 들어: income &lt;- 100 taxes &lt;- 20 net_income &lt;- income - taxes # gross_income &lt;- net_income + taxes 줄 바꿈을 제거하고 세미콜론으로 바꾸면 어떻게 됩니까? ;? E.g.: income &lt;- 200; taxes &lt;- 30 같은 줄에서 두 개의 과제를 수행하면 어떻게 됩니까? 예를 들어: income2 &lt;- taxes2 &lt;- 100 (Click here to go to the solution.) 2.3.3 Vectors and data frames 거의 변함없이 분석에서 한 번에 둘 이상의 수치를 처리하게 됩니다. 예를 들어 서점에서 고객의 나이 목록을 가질 수 있습니다. \\[28, 48, 47, 71, 22, 80, 48, 30, 31\\] Of course, we could store each observation in a separate variable: age_person_1 &lt;- 28 age_person_2 &lt;- 48 age_person_3 &lt;- 47 # ...and so on …하지만 이것은 금방 어색해집니다. 훨씬 더 나은 솔루션은 전체 목록을 단 하나의 변수에 저장하는 것입니다. R에서는 이러한 목록을 vector라고 합니다. 다음 코드를 사용하여 벡터를 만들 수 있습니다. 여기서 c는 combine을 나타냅니다.: age &lt;- c(28, 48, 47, 71, 22, 80, 48, 30, 31) T벡터의 숫자는 elements라고 합니다. 단일 숫자를 포함하는 변수를 처리한 것처럼 벡터 변수 age를 처리할 수 있습니다. 차이점은 작업이 목록의 모든 요소에 적용된다는 것입니다. 예를 들어 나이를 년이 아닌 개월로 표현하려면 다음을 사용하여 모든 나이를 개월로 변환할 수 있습니다.: age_months &lt;- age * 12 대부분의 경우 데이터에는 둘 이상의 수량에 대한 측정값이 포함됩니다. 우리 서점 고객의 경우 마지막 구매에 사용한 금액에 대한 정보도 있습니다.: \\[20, 59, 2, 12, 22, 160, 34, 34, 29\\] First, let’s store this data in a vector: purchase &lt;- c(20, 59, 2, 12, 22, 160, 34, 34, 29) Excel과 같은 스프레드시트 소프트웨어에서 하듯이 이 두 벡터를 테이블로 결합하면 좋을 것입니다. 그러면 두 벡터 사이의 관계를 볼 수 있습니다. 흥미로운 패턴을 찾을 수 있을까요? R에서 벡터 테이블을 데이터 프레임이라고 합니다. 다음과 같이 두 벡터를 데이터 프레임으로 결합할 수 있습니다.: bookstore &lt;- data.frame(age, purchase) 콘솔에 bookstore를 입력하면 두 벡터 값(및 행 번호)이 포함된 간단한 형식의 테이블이 표시됩니다.: &gt; bookstore age purchase 1 28 20 2 48 59 3 47 2 4 71 12 5 22 22 6 80 160 7 48 34 8 30 34 9 31 29 테이블을 보는 더 좋은 방법은 환경 패널에서 변수 이름 ’bookstore’를 클릭하는 것일 수 있습니다. 그러면 데이터 프레임이 스프레드시트 형식으로 열립니다. R이 변수의 값을 인쇄하도록 요청할 때 줄의 시작 부분에 [1]을 인쇄하는 경향이 있음을 알 수 있습니다.: &gt; age [1] 28 48 47 71 22 80 48 30 31 Why? Well, let’s see what happens if we print a longer vector: # When we enter data into a vector, we can put line breaks between # the commas: distances &lt;- c(687, 5076, 7270, 967, 6364, 1683, 9394, 5712, 5206, 4317, 9411, 5625, 9725, 4977, 2730, 5648, 3818, 8241, 5547, 1637, 4428, 8584, 2962, 5729, 5325, 4370, 5989, 9030, 5532, 9623) distances 콘솔 패널의 크기에 따라 R은 ’거리’에 데이터를 표시하기 위해 다른 행 수를 요구합니다. 출력은 다음과 같습니다.: &gt; distances [1] 687 5076 7270 967 6364 1683 9394 5712 5206 4317 9411 5625 9725 [14] 4977 2730 5648 3818 8241 5547 1637 4428 8584 2962 5729 5325 4370 [27] 5989 9030 5532 9623 or, if you have a narrower panel, &gt; distances [1] 687 5076 7270 967 6364 1683 9394 [8] 5712 5206 4317 9411 5625 9725 4977 [15] 2730 5648 3818 8241 5547 1637 4428 [22] 8584 2962 5729 5325 4370 5989 9030 [29] 5532 9623 대괄호 안의 숫자([1], [8], [15] 등)는 각 행에 먼저 인쇄되는 벡터의 요소를 알려줍니다. 따라서 후자의 예에서 벡터의 첫 번째 요소는 ‘687’, 8번째 요소는 ‘5712’, 15번째 요소는 ‘2730’ 등입니다. 요소의 indices라고 하는 이러한 숫자는 정확히 데이터의 일부는 아니지만 나중에 살펴보겠지만 데이터를 추적하는 데 유용합니다. 이것은 또한 R의 내부 작동에 대해 알려줍니다. x &lt;- 4 x renders the output &gt; x [1] 4 사실 x는 하나의 요소를 가지고 있지만 벡터라는 것을 알려줍니다. R의 거의 모든 것은 어떤 식으로든 벡터입니다. 벡터를 생성할 때 여러 줄에 데이터를 입력할 수 있다는 것은 매우 유용하지만 닫는 괄호 )를 포함하는 것을 잊은 경우 문제가 발생할 수도 있습니다. 콘솔 패널에서 마지막 대괄호가 없는 다음 코드를 실행해 보십시오.: distances &lt;- c(687, 5076, 7270, 967, 6364, 1683, 9394, 5712, 5206, 4317, 9411, 5625, 9725, 4977, 2730, 5648, 3818, 8241, 5547, 1637, 4428, 8584, 2962, 5729, 5325, 4370, 5989, 9030, 5532, 9623 Enter 키를 누르면 + 기호로 시작하는 새 줄이 나타납니다. 이것은 R이 당신의 문장이 끝났다고 생각하지 않는다는 것을 나타냅니다. 완료하려면 콘솔에 )를 입력한 다음 Enter 키를 누릅니다. 벡터와 데이터 프레임은 R에서 데이터로 작업할 때 매우 중요합니다. Chapters ?? 및 ??은 이러한 개체로 작업하는 방법을 설명합니다. \\[\\sim\\] Exercise 2.4 Do the following: 5명의 가상 인물의 키와 몸무게를 포함하는 ’height’와 ’weight’라는 두 개의 벡터를 만듭니다(즉, 숫자를 만들어 보세요!). 두 벡터를 데이터 프레임으로 결합합니다. 실습에서 이 벡터를 사용합니다. 2.6. (Click here to go to the solution.) Exercise 2.5 Try creating a vector using x &lt;- 1:5. What happens? What happens if you use 5:1 instead? How can you use this notation to create the vector \\((1,2,3,4,5,4,3,2,1)\\)? (Click here to go to the solution.) 2.3.4 Functions 데이터가 있습니다. 엄청난. 그러나 단순히 데이터를 갖는 것만으로는 충분하지 않습니다. 데이터로 무언가를 하고 싶을 것입니다. 그래프를 그리거나 평균값을 계산하거나 일부 고급 통계 모델을 그래프에 적용하고 싶을 수 있습니다. 이렇게 하려면 function을 사용합니다. 함수는 R에게 무언가를 하라고 지시하는 기성 명령 세트(코드)입니다. R에는 수천 개의 함수가 있습니다. 일반적으로 함수에 변수를 삽입하면 응답이 반환됩니다. 이를 위한 코드는 function_name(variable_name) 패턴을 따릅니다. 첫 번째 예로 변수의 평균을 계산하는 함수 mean을 고려하십시오.: # Compute the mean age of bookstore customers age &lt;- c(28, 48, 47, 71, 22, 80, 48, 30, 31) mean(age) 코드는 function_name(variable_name) 패턴을 따릅니다. 함수 이름은 mean이고 변수 이름은 age입니다. 일부 함수는 하나 이상의 변수를 입력으로 사용하며 함수의 동작을 제어하는 데 사용할 수 있는 추가 arguments(또는 parameters)가 있을 수도 있습니다. 이러한 예 중 하나는 두 변수 사이의 상관관계를 계산하는 cor입니다.: # Compute the correlation between the variables age and purchase age &lt;- c(28, 48, 47, 71, 22, 80, 48, 30, 31) purchase &lt;- c(20, 59, 2, 12, 22, 160, 34, 34, 29) cor(age, purchase) \\(0.59\\)라는 대답은 연령과 구매 규모 사이에 상당히 강한 양의 상관관계가 있는 것으로 보이며, 이는 나이가 많은 고객이 더 많이 지출하는 경향이 있음을 의미합니다. 반면에 데이터만 보면 가장 나이가 많은 80세 고객이 다른 누구보다 훨씬 더 많은 금액(160 화폐 단위)을 지출했음을 알 수 있습니다. 이러한 outliers가 상관관계 계산에 큰 영향을 미칠 수 있습니다. 기본적으로 ’cor’는 이상값에 민감한 것으로 알려진 Pearson 상관 관계 공식을 사용합니다. 따라서 Spearman 상관 관계와 같이 이상값에 더 강력한 공식을 사용하여 계산을 수행하는 것도 중요합니다. 이것은 cor에 추가 argument를 전달하여 계산에 사용할 방법을 알려주는 방식으로 수행할 수 있습니다.: cor(age, purchase, method = &quot;spearman&quot;) 결과 상관 관계 \\(0.35\\)는 이전 결과보다 상당히 낮습니다. 결국 상관 관계가 그렇게 강하지 않을 수도 있습니다. 그렇다면 함수에 전달할 인수를 어떻게 알 수 있습니까? 운 좋게도 모든 함수에 대해 가능한 모든 인수를 기억할 필요는 없습니다. 대신 관심 있는 함수에 대한 documentation, 즉 도움말 파일을 볼 수 있습니다. 이것은 ?function_name을 입력하여 수행됩니다. 콘솔 패널에서 또는 R function_name에 대한 웹 검색을 수행합니다. cor 함수에 대한 설명서를 보려면 다음을 입력하십시오.: ?cor R 함수에 대한 문서는 모두 동일한 패턴을 따릅니다. 설명: 함수가 수행하는 작업에 대한 간략한(때로는 매우 기술적인) 설명입니다. Usage: 함수가 R 코드에서 어떻게 사용되는지에 대한 추상적인 예입니다. Arguments: 함수의 입력 인수 목록 및 설명. Details: 기능 작동 방식에 대한 자세한 내용입니다. Value: 함수의 출력에 대한 정보. Note: 함수 작성자의 추가 설명(항상 포함되는 것은 아님). References: 기능과 관련된 논문이나 책에 대한 참조(항상 포함되는 것은 아님). See Also: 관련 함수 목록. Examples: 기능을 사용하는 방법에 대한 실용적인(때로는 덜 실용적인) 예. R 함수에 대한 문서를 처음 볼 때 이 모든 정보가 다소 압도적일 수 있습니다. 아마도 cor의 경우 더욱 그러할 것입니다. 이는 문서 페이지를 세 개의 다른(심하게 관련된) 함수인 var, cov 및 cov2cor와 공유한다는 점에서 약간 이례적입니다. 문서를 볼 때 섹션 헤드라인이 안내하도록 하십시오. 어떤 정보를 찾고 계십니까? 함수가 사용되는 방법에 대한 예를 찾고 있다면 예까지 아래로 스크롤하십시오. 사용 가능한 인수를 알고 싶다면 사용법 및 인수를 살펴보십시오. 마지막으로 변수에 아무 것도 하지 않기 때문에 입력이 전혀 필요하지 않은 몇 가지 함수가 있습니다. 이러한 예 중 하나는 시스템의 현재 시간을 인쇄하는 Sys.time()입니다.: Sys.time() Sys.time에 입력이 필요하지 않더라도 R에 함수 실행을 알리는 괄호 ()를 작성해야 합니다. \\[\\sim\\] Exercise 2.6 연습문제 2.4에서 만든 데이터를 사용하여 다음을 수행합니다. 사람들의 평균 키를 계산합니다. 키와 몸무게의 상관관계를 계산합니다. (Click here to go to the solution.) Exercise 2.7 다음을 수행하십시오. length 함수에 대한 문서를 읽으십시오. 무엇을합니까? 그것을 height 벡터에 적용하십시오. sort 함수에 대한 문서를 읽으십시오. 무엇을합니까? 인수 감소(FALSE 또는 TRUE일 수 있는 값)는 무엇을 합니까? 함수를 weight 벡터에 적용합니다. (Click here to go to the solution.) 2.3.5 Mathematical operations R에서 덧셈, 뺄셈, 곱셈 및 나눗셈을 수행하기 위해 표준 기호 +, -, *, /를 사용할 수 있습니다. 수학에서와 마찬가지로 괄호 안의 식을 먼저 평가하고 곱셈은 덧셈보다 먼저 수행합니다. 따라서 1 + 2*(8/2)는 \\(1+2\\cdot(8/2)=1+2\\cdot 4=1+8=9\\)입니다. 이러한 기본 산술 연산자 외에도 R에는 제곱근, 로그 및 삼각 함수를 포함하여 변수에 적용할 수 있는 여러 수학 함수가 있습니다. 다음은 변수 x에서 함수를 사용하기 위한 구문을 보여주는 불완전한 목록입니다. 전체적으로 ’a’는 숫자여야 합니다. abs(x): computes the absolute value \\(|x|\\). sqrt(x): computes \\(\\sqrt{x}\\). log(x): computes the logarithm of \\(x\\) with the natural number \\(e\\) as the base. log(x, base = a): computes the logarithm of \\(x\\) with the number \\(a\\) as the base. a^x: computes \\(a^x\\). exp(x): computes \\(e^x\\). sin(x): computes \\(\\sin(x)\\). sum(x): when x is a vector \\(x=(x_1,x_2,x_3,\\ldots,x_n)\\), computes the sum of the elements of x: \\(\\sum_{i=1}^nx_i\\). prod(x): when x is a vector \\(x=(x_1,x_2,x_3,\\ldots,x_n)\\), computes the product of the elements of x: \\(\\prod_{i=1}^nx_i\\). pi: a built-in variable with value \\(\\pi\\), the ratio of the circumference of a circle to its diameter. x %% a: computes \\(x\\) modulo \\(a\\). factorial(x): computes \\(x!\\). choose(n,k): computes \\({n}\\choose{k}\\). \\[\\sim\\] Exercise 2.8 Compute the following: \\(\\sqrt{\\pi}\\) \\(e^2\\cdot log(4)\\) (Click here to go to the solution.) Exercise 2.9 대답이 무한하거나 정의되지 않은 계산을 수행하려고 하면 R은 숫자가 아닌 대답을 반환합니다. 몇 가지 가능한 결과를 보려면 다음을 시도하십시오. Compute \\(1/0\\). Compute \\(0/0\\). Compute \\(\\sqrt{-1}\\). (Click here to go to the solution.) 2.4 Descriptive statistics 이 장의 나머지 부분에서는 ggplot2 패키지와 함께 제공되는 두 가지 데이터 세트를 연구할 것입니다. 다이아몬드: 50,000개 이상의 컷된 다이아몬드 가격을 설명합니다. msleep: 83마리 포유류의 수면 시간을 설명합니다. 이것들과 일부 다른 데이터 세트는 ggplot2를 로드할 때 자동으로 데이터 프레임으로 로드됩니다.: library(ggplot2) 먼저 msleep 데이터 세트를 살펴보겠습니다. 먼저 살펴보려면 콘솔 패널에 다음을 입력하십시오.: msleep 그러면 데이터의 처음 10개 행과 일부 열이 표시됩니다. 또한 또 다른 중요한 정보를 제공합니다. ’83 x 11’은 데이터세트에 83개의 행(즉, 83개의 관측치)과 11개의 열(데이터세트의 변수에 해당하는 각 열 포함)이 있음을 의미합니다. 그러나 데이터를 보는 더 나은 방법이 있습니다. 83개 행과 11개 변수를 모두 보려면 다음을 사용하십시오.: View(msleep) 일부 셀에는 적절한 값 대신 NA 값이 있음을 알 수 있습니다. NA는 사용할 수 없음을 나타내며 R에서 누락된 데이터를 지적하십시오. 이 경우 동물에 대한 값을 알 수 없음을 의미합니다. 데이터를 포함하는 데이터 프레임에 대한 정보를 찾기 위해 몇 가지 유용한 기능은 다음과 같습니다.: head(msleep) tail(msleep) dim(msleep) str(msleep) names(msleep) dim은 데이터 프레임의 행과 열의 수를 반환하는 반면 str은 11개의 변수에 대한 정보를 반환합니다. 특히 중요한 것은 변수의 데이터 유형(이 경우 chr 및 num)으로, 어떤 종류의 데이터(숫자, 범주, 날짜 등)를 다루고 있는지 알려줍니다. ?? 장에서 데이터 유형에 대해 자세히 알아볼 것입니다. 마지막으로 names는 변수 이름을 포함하는 벡터를 반환합니다. 함수와 마찬가지로 패키지와 함께 제공되는 데이터 세트에는 이를 설명하는 문서가 있습니다. msleep에 대한 문서는 데이터와 해당 변수에 대한 간단한 설명을 제공합니다. 변수에 대해 자세히 알아보려면 읽어보세요.: ?msleep 마지막으로 RStudio의 환경 패널에 있는 변수 중 msleep이 나열되지 않는다는 것을 알 수 있습니다. 거기에 포함하려면 다음을 실행할 수 있습니다.: data(msleep) 2.4.1 Numerical data 이제 각 변수가 무엇을 나타내는지 알았으므로 통계를 계산할 차례입니다. 각 변수에 대한 요약을 제공하는 설명 통계를 얻는 편리한 방법은 summary 기능을 사용하는 것입니다.: summary(msleep) 텍스트 변수의 경우 현재 어떤 정보도 제공하지 않습니다. 그러나 수치 변수의 경우 유용한 정보를 많이 제공합니다. 예를 들어 sleep_rem 변수의 경우 다음과 같습니다.: sleep_rem Min. :0.100 1st Qu.:0.900 Median :1.500 Mean :1.875 3rd Qu.:2.400 Max. :6.600 NA&#39;s :22 이것은 sleep_rem의 평균이 1.875이고 가장 작은 값이 0.100이고 가장 큰 값이 6.600임을 알려줍니다. 제1사분위수10는 ‘0.900’, 중앙값은 ‘1.500’, 3사분위수는 ’2.400’입니다. 마지막으로 값이 없는 22마리의 동물이 있습니다(누락된 데이터 - ’NA’로 표시됨). 때로는 이들 중 하나만 계산하고 싶을 때도 있고 ’요약’에 포함되지 않은 요약 통계를 계산하기를 원할 수도 있습니다. sleep_total 변수에 대한 설명 통계를 계산하고 싶다고 가정해 보겠습니다. 데이터 프레임 내부의 벡터에 액세스하려면 달러 기호(data_frame_name$vector_name)를 사용합니다. 따라서 msleep 데이터 프레임의 sleep_total 벡터에 액세스하려면: msleep$sleep_total 이 벡터에 대한 설명 통계를 계산하는 데 사용할 수 있는 함수의 몇 가지 예는 다음과 같습니다.: mean(msleep$sleep_total) # Mean median(msleep$sleep_total) # Median max(msleep$sleep_total) # Max min(msleep$sleep_total) # Min sd(msleep$sleep_total) # Standard deviation var(msleep$sleep_total) # Variance quantile(msleep$sleep_total) # Various quantiles 하루에 8시간 이상 자는 동물의 수를 확인하려면 다음을 사용할 수 있습니다.: sum(msleep$sleep_total &gt; 8) # Frequency (count) mean(msleep$sleep_total &gt; 8) # Relative frequency (proportion) msleep$sleep_total &gt; 8은 각 동물의 총 수면 시간이 8보다 큰지 확인합니다. ?? 섹션에서 이와 같은 표현으로 돌아갑니다. 이제 동물의 REM 수면 시간 평균값을 계산해 보겠습니다.: mean(msleep$sleep_rem) 위의 호출은 ’NA’라는 답을 반환합니다. 그 이유는 sleep_rem 벡터에 NA 값이 있기 때문입니다(전에 본 것처럼 22개). 우리가 실제로 원했던 것은 우리가 REM 수면을 알고 있는 동물들 사이의 평균값이었습니다. 이것을 얻을 수 있는 방법이 있는지 알아보기 위해 mean에 대한 문서를 살펴볼 수 있습니다.: ?mean 인수 na.rm은 유망해 보입니다. “계산이 진행되기 전에 NA 값을 제거해야 하는지 여부를 나타내는 논리 값”입니다. 즉, 평균을 계산할 때 ‘NA’ 값을 무시할지 여부를 R에 알려줍니다. 계산에서 NA:s를 무시하기 위해 함수 호출에서 na.rm = TRUE를 설정합니다.: mean(msleep$sleep_rem, na.rm = TRUE) NA 값은 msleep에서 제거되지 않았습니다. ’na.rm = TRUE’로 설정하면 단순히 R이 특정 계산에서 이를 삭제하지 않고 무시하도록 지시합니다. sleep_total과 sleep_rem 사이의 상관관계를 계산하려고 하면 동일한 문제에 직면하게 됩니다.: cor(msleep$sleep_total, msleep$sleep_rem) 문서(?cor)를 간단히 살펴보면 NA 값을 무시하는 데 사용되는 인수가 cor에 대해 다른 이름을 가짐을 알 수 있습니다. na.rm이 아니라 use입니다. 나중에 한 번에 두 개 이상의 변수를 연구하면 그 이유가 분명해집니다. 지금은 use = \"complete.obs\"를 설정하여 완전한 데이터(즉, 누락된 값 없음)가 있는 관찰만 사용하여 상관 관계를 계산합니다.: cor(msleep$sleep_total, msleep$sleep_rem, use = &quot;complete.obs&quot;) 2.4.2 Categorical data vore(먹이 행동) 및 conservation(보존 상태)과 같은 일부 변수는 numerical이 아니라 categorical입니다. 따라서 평균이나 가장 큰 값을 계산하는 것은 의미가 없습니다. 범주형 변수(종종 R에서 factors라고 함)의 경우 table을 사용하여 다양한 범주의 빈도를 보여주는 테이블을 대신 만들 수 있습니다.: table(msleep$vore) 대신 다른 범주의 비율을 표시하기 위해 방금 만든 테이블에 proportions를 적용할 수 있습니다.: proportions(table(msleep$vore)) table 함수는 두 범주형 변수의 다양한 조합에 대한 개수를 보여주는 교차 표를 구성하는 데에도 사용할 수 있습니다.: # Counts: table(msleep$vore, msleep$conservation) # Proportions, per row: proportions(table(msleep$vore, msleep$conservation), margin = 1) # Proportions, per column: proportions(table(msleep$vore, msleep$conservation), margin = 2) \\[\\sim\\] Exercise 2.10 아직 로드하지 않은 경우 library(ggplot2)를 사용하여 ggplot2를 로드합니다. 그런 다음 다음을 수행합니다. 다이아몬드 데이터에 대한 문서를 보고 다양한 변수에 대해 읽어보십시오. 데이터 구조를 확인합니다. 얼마나 많은 관측치와 변수가 있고 어떤 유형의 변수(숫자, 범주형 등)가 있습니까? 요약 통계를 계산합니다(평균, 중앙값, 최소값, 최대값, 범주형 변수의 개수). 누락된 값이 있습니까? (Click here to go to the solution.) 2.5 Plotting numerical data R로 플롯을 생성하는 방법에는 여러 가지가 있습니다. 이 책에서는 소위 그래픽의 문법을 사용하여 보기 좋은 플롯을 생성할 수 있는 ggplot2 패키지를 사용하여 플롯을 생성하는 데 주로 중점을 둘 것입니다. 그래픽의 문법은 그래픽 언어를 확립하는 데 도움이 되는 일련의 구조적 규칙입니다. 이것의 장점은 (거의) 모든 플롯이 모두 동일한 논리 또는 문법을 따르는 함수로 생성된다는 것입니다. 그렇게 하면 각각의 새로운 플롯에 대해 새로운 인수를 배울 필요가 없습니다. 이것을 기술 통계를 계산할 때 NA 값을 무시하려고 할 때 발생한 문제와 비교할 수 있습니다. mean에는 na.rm 인수가 필요한 반면 cor에는 use 인수가 필요합니다. 모든 플롯에 공통 문법을 사용함으로써 학습해야 하는 인수의 수를 줄입니다. 그래픽 플롯의 문법에 대한 세 가지 주요 구성 요소는 다음과 같습니다.: 데이터: 데이터 세트의 관찰, 미학: 데이터에서 시각적 속성(예: 기하학적 개체의 축 및 크기)으로 매핑 기하학: 기하학적 객체, 예. 플롯에 표시되는 것을 나타내는 선. ggplot2를 사용하여 플롯을 만들 때 사용할 데이터, 미학 및 기하학을 정의해야 합니다. 조금 이상하게 들린다면 몇 가지 예를 살펴보면 훨씬 더 명확해질 것입니다. 먼저 msleep 데이터의 일부 연속 변수를 시각화하여 이것이 어떻게 작동하는지 설명합니다. 2.5.1 Our first plot 첫 번째 예로, 동물의 총 수면 시간과 동물의 REM 수면 시간을 플로팅하여 산점도를 만들어 봅시다. 기본 R을 사용하여 우리는 예를 들어 다음을 사용하는 방법과 유사한 방식으로 단순히 plot 함수를 호출합니다. `cor: plot(msleep$sleep_total, msleep$sleep_rem) ggplot2를 사용하여 이 작업을 수행하는 코드는 더 장황합니다.: library(ggplot2) ggplot(msleep, aes(x = sleep_total, y = sleep_rem)) + geom_point() [그림] 2.2: A scatterplot of mammal sleeping times. 코드는 세 부분으로 구성됩니다. 데이터: ggplot: msleep에 대한 호출의 첫 번째 인수에 의해 제공됩니다. 미학: ggplot 호출의 두 번째 인수인 aes에 의해 제공됩니다. 여기서 sleep_total은 x축에, sleep_rem은 y축에 매핑됩니다. Geoms: geom_point로 제공되며 관측치가 포인트로 표시됨을 의미합니다. 이 시점에서 당신은 지구상에서 누군가가 플롯을 생성하기 위해 ggplot2 코드를 사용하기를 원하는 이유를 물을 수 있습니다. 유효한 질문입니다. 기본 R 코드는 더 단순해 보이고 우리가 본 다른 기능과 일치합니다. ggplot2 코드가… 다르게 보입니다. 이는 그래픽의 grammar를 사용하기 때문입니다. 그래픽은 여러 면에서 R로 작업하는 방식과 달리 고유한 언어입니다. 하지만 ggplot2를 사용하여 만든 플롯도 다르게 보였습니다. 포인트를 플로팅하기 위해 빈 원 대신 채워진 원을 사용했으며 배경에 그리드가 있습니다. 기본 R 그래픽과 ggplot2 모두에서 이러한 설정 및 기타 많은 설정을 변경할 수 있습니다. pch 인수와 grid 함수를 사용하여 다음과 같이 기본 R을 사용하여 ggplot2 플롯과 유사한 것을 만들 수 있습니다.: plot(msleep$sleep_total, msleep$sleep_rem, pch = 16) grid() 어떤 사람들은 기본 R 플롯의 모양과 구문을 선호하는 반면, 다른 사람들은 ggplot2 그래픽이 기본 모양이 더 예쁘다고 주장합니다. 나는 두 집단 모두에 공감할 수 있다. 일부 유형의 플롯은 기본 R을 사용하여 생성하기 쉽고 일부는 ggplot2를 사용하여 생성하기가 더 쉽습니다. 나는 기본 R 그래픽의 단순함을 좋아하고, 다양한 구성 요소를 결합하려는 보다 정교한 그래프뿐만 아니라 신속하고 직관적인 시각화를 위해 선호합니다. 데이터 세트를 탐색하고 이해하기 위해 그래픽을 사용하는 탐색적 데이터 분석을 포함하여 그 사이의 모든 것에 대해서는 ggplot2를 선호합니다. 이 책에서는 빠르고 간단한 플롯에 기본 그래픽을 사용하지만 ggplot2와 이를 사용하여 데이터를 탐색하는 방법에 더 중점을 둡니다. ggplot2 산점도를 만드는 데 사용된 구문은 본질적으로 ggplot(data, aes) + geom이었습니다. ’ggplot2’를 사용하여 생성된 모든 플롯은 산점도, 막대 차트 또는 다른 것이든 상관없이 이 패턴을 따릅니다. ggplot(data, aes) + geom의 더하기 기호는 플롯에 더 많은 기하학(예: 추세선 및 기타 항목)을 추가할 수 있음을 의미하므로 중요합니다. 우리는 곧 그것에 대해 돌아갈 것입니다. 사용자가 달리 지정하지 않는 한 aes에 대한 처음 두 인수는 항상 x 및 y 축에 매핑됩니다. 즉, x = 및 y = 비트를 제거하여 위의 코드를 단순화할 수 있습니다. (가독성이 약간 떨어지는 대신). 또한 + 기호 뒤에 줄 바꿈을 삽입하는 것이 좋은 스타일로 간주됩니다. 결과 코드는: ggplot(msleep, aes(sleep_total, sleep_rem)) + geom_point() 이것은 어떤 식으로든 플롯을 변경하지 않는다는 점에 유의하십시오. 차이점은 단지 코드 스타일에 있습니다. \\[\\sim\\] Exercise 2.11 Create a scatterplot with total sleeping time along the x-axis and time awake along the y-axis (using the msleep data). What pattern do you see? Can you explain it? (Click here to go to the solution.) 2.5.2 Colours, shapes and axis labels 이제 산점도를 만드는 방법을 알았지만 플롯을 다른 사람에게 보여줄 계획이라면 몇 가지 변경해야 할 사항이 있을 수 있습니다. 예를 들어 일반적으로 x축의 레이블을 변수 이름 “sleep_total”에서 “총 수면 시간(h)”과 같은 이름으로 변경하는 것이 좋습니다. 이것은 + 기호를 다시 사용하여 플롯에 xlab에 대한 호출을 추가하여 수행됩니다.: ggplot(msleep, aes(sleep_total, sleep_rem)) + geom_point() + xlab(&quot;Total sleep time (h)&quot;) 더하기 기호는 행의 시작 부분이 아닌 행의 끝에 위치해야 합니다. y축 레이블을 변경하려면 대신 ylab을 추가하십시오. 점의 색상을 변경하려면 geom_point에서 색상을 설정할 수 있습니다.: ggplot(msleep, aes(sleep_total, sleep_rem)) + geom_point(colour = &quot;red&quot;) + xlab(&quot;Total sleep time (h)&quot;) “빨간색” 외에도 선택할 수 있는 몇 가지 색상이 더 있습니다. 콘솔의 에서 colors()를 실행하여 R에 이름이 있는 657개의 색상 목록을 볼 수 있습니다(예: \"papayawhip\", \"blanchedalmond\", 및 \"cornsilk4\") 또는 \"#FF5733\"과 같은 색상 16진수 코드를 사용합니다. 또는 점의 색상을 사용하여 서로 다른 범주를 구분할 수 있습니다. 이제 데이터 변수를 시각적 속성에 매핑하고 있으므로 aes에 color 인수를 추가하면 됩니다. 예를 들어 변수 ’vore’를 사용하여 초식동물, 육식동물, 잡식동물의 차이점을 표시할 수 있습니다.: ggplot(msleep, aes(sleep_total, sleep_rem, colour = vore)) + geom_point() + xlab(&quot;Total sleep time (h)&quot;) 색상을 설정하기 위해 수면 주기 길이 sleep_cycle과 같은 연속 변수를 사용하면 어떻게 될까요? ggplot(msleep, aes(sleep_total, sleep_rem, colour = sleep_cycle)) + geom_point() + xlab(&quot;Total sleep time (h)&quot;) 섹션에서 플롯의 색상(및 기타 부분)을 사용자 지정하는 방법에 대해 자세히 알아봅니다. ??. \\[\\sim\\] Exercise 2.12 다이아몬드 데이터를 사용하여 다음을 수행합니다. x축에 캐럿이 있고 y축에 가격이 있는 산점도를 만듭니다. X축 레이블을 “다이아몬드 무게(캐럿)”로 변경하고 Y축 레이블을 “가격(USD)”으로 변경합니다. 컷을 사용하여 점의 색상을 설정합니다. alpha = 1 인수를 geom_point에 추가해 보십시오. 즉, geom_point(alpha = 1). 아무 일도 일어나지 않습니까? 1을 0.5 및 0.25로 변경하고 플롯에 어떤 영향을 미치는지 확인하십시오. (Click here to go to the solution.) Exercise 2.13 점의 색상을 변경한 것과 마찬가지로 크기와 모양도 변경할 수 있습니다. 이에 대한 인수는 size 및 shape입니다. 연습문제 2.12의 산점도를 변경하여 절단 품질이 다른 다이아몬드가 다른 모양으로 표시되도록 합니다. 그런 다음 각 포인트의 크기가 다이아몬드의 길이, 즉 변수 x에 의해 결정되도록 변경합니다. (Click here to go to the solution.) 2.5.3 Axis limits and scales 다음으로 동물의 뇌 크기와 총 수면 시간 사이의 관계를 연구하고 싶다고 가정합니다. 다음을 사용하여 산점도를 생성합니다.: ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) + geom_point() + xlab(&quot;Brain weight&quot;) + ylab(&quot;Total sleep time&quot;) 나머지보다 훨씬 무거운 뇌를 가진 두 마리의 동물이 있습니다(아프리카 코끼리와 아시아 코끼리). 이러한 이상값은 플롯을 왜곡하여 패턴을 찾기 어렵게 만듭니다. 플롯에 xlim을 추가하여 x축을 0에서 1.5로만 변경하여 개선되는지 확인할 수 있습니다.: ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) + geom_point() + xlab(&quot;Brain weight&quot;) + ylab(&quot;Total sleep time&quot;) + xlim(0, 1.5) 이것은 약간 더 낫지만 여전히 y축 근처에 많은 점이 모여 있고 이제 일부 동물이 플롯에서 누락되었습니다. 대신 y축의 한계를 변경하려면 같은 방식으로 ylim을 사용했을 것입니다. 또 다른 옵션은 ’aes’에서 직접 수행할 수 있는 뇌 가중치에 로그 변환을 적용하여 x축을 재조정하는 것입니다.: ggplot(msleep, aes(log(brainwt), sleep_total, colour = vore)) + geom_point() + xlab(&quot;log(Brain weight)&quot;) + ylab(&quot;Total sleep time&quot;) 이것은 약한 감소 추세를 보이는 더 보기 좋은 산점도입니다. 이를 만들기 위해 이상값(the elephants)을 제거할 필요가 없었습니다. 단점은 이제 x축을 해석하기 어려워졌다는 것입니다. 이를 완화하는 세 번째 옵션은 플롯에 scale_x_log10을 추가하여 x축의 스케일을 \\(\\log_{10}\\) 스케일로 변경하는 것입니다. 원래 x-스케일). ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) + geom_point() + xlab(&quot;Brain weight (logarithmic scale)&quot;) + ylab(&quot;Total sleep time&quot;) + scale_x_log10() \\[\\sim\\] Exercise 2.14 ‘msleep’ 데이터를 사용하여 로그 변환된 체중 대 로그 변환된 뇌 무게의 플롯을 만듭니다. 총 수면 시간을 사용하여 포인트의 색상을 설정합니다. 축의 텍스트를 유익한 것으로 변경하십시오. (Click here to go to the solution.) 2.5.4 Comparing groups 우리는 종종 서로 다른 그룹을 시각적으로 비교하고자 합니다. 플롯에서 그룹 간의 차이를 표시하는 한 가지 방법은 facetting을 사용하는 것입니다. 즉, 다른 그룹에 해당하는 플롯 그리드를 만드는 것입니다. 예를 들어, 동물의 뇌 무게와 총 수면 시간의 플롯에서 다양한 색상 포인트 대신 패싯을 사용하여 msleep 데이터에서 다양한 섭식 행동(잡식 동물, 육식 동물 등)을 분리할 수 있습니다. ggplot2에서 플롯에 facet_wrap에 대한 호출을 추가하여 이를 수행합니다.: ggplot(msleep, aes(brainwt, sleep_total)) + geom_point() + xlab(&quot;Brain weight (logarithmic scale)&quot;) + ylab(&quot;Total sleep time&quot;) + scale_x_log10() + facet_wrap(~ vore) 그리드에 있는 다른 플롯의 x축과 y축은 모두 동일한 스케일과 한계를 가집니다. \\[\\sim\\] Exercise 2.15 다이아몬드 데이터를 사용하여 다음을 수행합니다. x축에 ’캐럿’이 있고 y축에 ’가격’이 있는 산점도를 만들고 ’컷’으로 패싯 처리합니다. facet_wrap(?facet_wrap)에 대한 문서를 읽으십시오. 플롯 그리드의 행 수를 어떻게 변경할 수 있습니까? 파트 1과 동일한 플롯을 생성하지만 행이 5개입니다. (Click here to go to the solution.) 2.5.5 Boxplots 그룹을 비교하는 또 다른 옵션은 boxplot(box-and-whiskers plot이라고도 함)입니다. ggplot2를 사용하여 geom_boxplot을 사용하여 먹이 행동으로 그룹화된 동물의 수면 시간에 대한 상자 그림을 만듭니다. 기본 R을 사용하여 boxplot을 사용합니다. function instead: # Base R: boxplot(sleep_total ~ vore, data = msleep) # ggplot2: ggplot(msleep, aes(vore, sleep_total)) + geom_boxplot() [그림] 2.3: Boxplots showing mammal sleeping times. 상자는 summary를 사용하여 얻은 것과 유사하게 다른 그룹에 대한 중요한 설명 통계를 시각화합니다. Median: 상자 내부의 두꺼운 검정색 선. 제1사분위수: 상자의 바닥. 제3사분위수: 상자의 상단. Minimum: 상자 바닥에서 연장되는 선(“수염”)의 끝. Maximum: 박스 상단에서 연장되는 라인의 끝. Outliers: 너무 많이 벗어나는 관측치11 나머지에서 별도의 점으로 표시됩니다. 이러한 이상값은 중앙값, 사분위수 및 극단값 계산에 포함되지 않습니다. 산점도와 마찬가지로 코드는 세 부분으로 구성됩니다. 데이터: ggplot: msleep에 대한 호출의 첫 번째 인수에 의해 제공됩니다. 미학: ggplot 호출의 두 번째 인수인 aes에서 제공되며 여기서 그룹 변수 vore를 x축에 매핑하고 숫자 변수 sleep_total을 y축에 매핑합니다. Geoms: geom_boxplot에 의해 제공되며 데이터가 상자 그림으로 시각화됨을 의미합니다. \\[\\sim\\] Exercise 2.16 다이아몬드 데이터를 사용하여 다음을 수행합니다. ’cut’으로 그룹화된 다이아몬드 가격의 상자 그림을 만듭니다. geom_boxplot에 대한 문서를 읽으십시오. 상자의 색상과 윤곽선을 어떻게 변경할 수 있습니까? 플롯의 미학에서 reorder(cut, price, median)로 cut을 교체합니다. 재정렬은 무엇을 합니까? 결과는 무엇입니까? geom_jitter(size = 0.1, alpha = 0.2)를 플롯에 추가합니다. 무슨 일이야? (Click here to go to the solution.) 2.5.6 Histograms 연속 변수의 분포를 표시하기 위해 히스토그램을 사용할 수 있습니다. 이 히스토그램에서는 데이터가 여러 빈으로 분할되고 각 빈의 관측값 수가 막대로 표시됩니다. 히스토그램에 대한 ggplot2 코드는 다른 플롯과 동일한 패턴을 따르는 반면 기본 R 코드는 hist 함수를 사용합니다.: # Base R: hist(msleep$sleep_total) # ggplot2: ggplot(msleep, aes(sleep_total)) + geom_histogram() [그림] 2.4: A histogram for mammal sleeping times. 이전과 마찬가지로 ggplot2 코드의 세 부분은 다음과 같습니다. 데이터: ggplot: msleep에 대한 호출의 첫 번째 인수에 의해 제공됩니다. 미학: ggplot 호출의 두 번째 인수인 aes에서 제공되며 여기서 sleep_total을 x축에 매핑합니다. 기하학: geom_histogram으로 제공되며 데이터가 히스토그램으로 시각화됨을 의미합니다. \\[\\sim\\] Exercise 2.17 다이아몬드 데이터를 사용하여 다음을 수행합니다. 다이아몬드 가격의 히스토그램을 만듭니다. 패싯을 사용하여 다양한 컷에 대한 다이아몬드 가격의 히스토그램을 생성합니다. geom_histogram에 적절한 인수를 추가하여 막대 주위에 검은 윤곽선을 추가합니다12. (Click here to go to the solution.) 2.6 Plotting categorical data 범주형 데이터를 시각화할 때 일반적으로 각 범주에 대한 개수, 즉 관찰 수를 표시하려고 합니다. 이 유형의 데이터에 대한 가장 일반적인 플롯은 막대 차트입니다. 2.6.1 Bar charts 막대 차트는 범주 개수가 막대로 표시되는 히스토그램의 개별 아날로그입니다. 생성 코드는 다음과 같습니다.: # Base R barplot(table(msleep$vore)) # ggplot2 ggplot(msleep, aes(vore)) + geom_bar() [그림] 2.5: A bar chart for the mammal sleep data. 항상 그렇듯이 ggplot2 코드의 세 부분은 다음과 같습니다. 데이터: ggplot: msleep에 대한 호출의 첫 번째 인수에 의해 제공됩니다. 미학: ggplot 호출의 두 번째 인수인 aes에서 제공되며 여기서 vore를 x축에 매핑합니다. Geoms: geom_bar로 제공되며 데이터가 막대 차트로 시각화됨을 의미합니다. ggplot2를 사용하여 누적 막대 차트를 만들려면 모든 그룹을 x축의 동일한 값에 매핑한 다음 다른 그룹을 다른 색상에 매핑합니다. 이것은 다음과 같이 할 수 있습니다: ggplot(msleep, aes(factor(1), fill = vore)) + geom_bar() \\[\\sim\\] Exercise 2.18 다이아몬드 데이터를 사용하여 다음을 수행합니다. 다이아몬드 컷의 막대 차트를 만듭니다. geom_bar에 fill 인수를 추가하여 막대에 다른 색상을 추가합니다. geom_bar에 대한 설명서를 확인하십시오. 막대의 너비를 어떻게 줄일 수 있습니까? 1부에서 사용한 코드로 돌아갑니다. aes에 fill =clarity를 추가합니다. 어떻게 되나요? 다음으로 position = \"dodge\"를 geom_bar에 추가합니다. 무슨 일이야? 1부에서 사용한 코드로 돌아갑니다. 플롯에 coord_flip()을 추가합니다. 무슨 일이야? (Click here to go to the solution.) 2.7 Saving your plot ggplot2 플롯을 생성하면 R에서 플롯 객체로 저장할 수 있습니다. library(ggplot2) myPlot &lt;- ggplot(msleep, aes(sleep_total, sleep_rem)) + geom_point() 저장된 플롯 객체를 플롯하려면 해당 이름을 쓰기만 하면 됩니다.: myPlot 원하는 경우 이전과 마찬가지로 플롯에 항목을 추가할 수 있습니다.: myPlot + xlab(&quot;I forgot to add a label!&quot;) 플롯 개체를 이미지 파일로 저장하려면 ggsave를 사용하십시오. width 및 height 인수를 사용하면 그림의 크기를 제어할 수 있습니다(‘units’ 인수를 사용하여 달리 지정하지 않는 한 인치 단위). ggsave(&quot;filename.pdf&quot;, myPlot, width = 5, height = 5) 플롯 개체의 이름을 제공하지 않으면 ggsave는 사용자가 만든 마지막 ggplot2 플롯을 저장합니다. pdf 외에도 이미지를 저장할 수 있습니다. 파일 이름에서 파일 확장자를 변경하기만 하면 jpg, tif, eps, svg 및 png 파일로 변환할 수 있습니다. 또는 기본 R 및 ggplot2의 그래픽은 pdf 및 png 기능을 사용하여 dev.off사용하여 저장할 수 있습니다. 파일의 끝을 표시하는 index{}: pdf(&quot;filename.pdf&quot;, width = 5, height = 5) myPlot dev.off() png(&quot;filename.png&quot;, width = 500, height = 500) plot(msleep$sleep_total, msleep$sleep_rem) dev.off() RStudio의 플롯 패널에서 내보내기 버튼을 클릭하여 그래픽을 저장할 수도 있습니다. 재현성 때문에 코드를 사용하여 플롯을 저장하는 것이 일반적으로 더 좋습니다. 어느 시점에서 돌아가서 이전 그림을 변경하고 싶을 수 있으며 그래픽을 내보낼 코드가 이미 있는 경우 훨씬 더 쉬울 것입니다. \\[\\sim\\] Exercise 2.19 다음을 수행하십시오. 플롯 개체를 만들고 4 x 4인치 png 파일로 저장합니다. 인쇄할 이미지를 준비할 때 해상도를 높이고 싶을 수 있습니다. ggsave에 대한 설명서를 확인하십시오. png 파일의 해상도를 600dpi로 어떻게 높일 수 있습니까? (Click here to go to the solution.) You’ve now had a first taste of graphics using R. We have however only scratched the surface, and will return to the many uses of statistical graphics in Chapter ??. 2.8 Troubleshooting 때때로 R은 오류 메시지를 표시합니다. 경우에 따라 이 경우와 같이 유익하고 유용할 수 있습니다.: age &lt;- c(28, 48, 47, 71, 22, 80, 48, 30, 31) means(age) where R prints: &gt; means(age) Error in means(age) : could not find function &quot;means&quot; 이것은 우리가 사용하려는 함수인 means가 존재하지 않는다는 것을 알려줍니다. 여기에는 두 가지 가능한 이유가 있습니다. 함수가 있는 패키지를 로드하지 않았거나 함수 이름을 잘못 입력했기 때문입니다. 우리의 예에서 후자는 사실입니다. 우리가 정말로 사용하고 싶었던 함수는 물론 ’means’가 아니라 ’mean’이었습니다. 다른 경우에는 다음 예제와 같이 오류 메시지를 해석하는 것이 불가능해 보입니다.: Error in if (str_count(string = f[[j]], pattern = \\&quot;\\\\\\\\S+\\&quot;) == 1) { : \\n argument is of length zero and Error in if (requir[y] &amp;gt; supply[x]) { : \\nmissing value where TRUE/FALSE needed 오류 메시지가 표시되면 다음 단계를 따르는 것이 좋습니다. 오류 메시지를 주의 깊게 읽고 해독해 보십시오. 전에 본 적이 있습니까? 특정 변수나 함수를 가리키는가? R의 일반적인 오류 메시지를 다루는 이 책의 ?? 섹션을 확인하십시오. 코드를 확인하십시오. 변수나 함수 이름을 잘못 입력했습니까? 누락된 괄호, 이상한 쉼표 또는 유효하지 않은 문자가 있습니까? 오류 메시지를 복사하고 메시지를 검색어로 사용하여 웹 검색을 수행합니다. 다른 사람이 같은 문제를 겪었을 가능성이 높으며 온라인에서 해결책을 찾을 수 있습니다. 이것은 문제에 대한 해결책을 찾는 훌륭한 지름길입니다. 사실, 이것은 이 책 전체에서 가장 중요한 단 하나의 팁일 것입니다. 오류 메시지를 유발하는 함수에 대한 설명서를 읽고 사용 방법에 대한 몇 가지 예를 살펴보십시오(문서 및 온라인(예: 블로그 게시물)). 올바르게 사용하셨습니까? 장??에 제시된 디버깅 도구를 사용하거나 작업 중인 예제를 단순화하고(예: 분석 또는 데이터의 일부 제거) 문제가 제거되는지 확인하십시오. 여전히 해결책을 찾을 수 없는 경우 Stack Overflow 또는 RStudio 커뮤니티 포럼과 같은 사이트에 질문을 게시하세요. /). 코드를 게시하고 오류 메시지가 나타나는 컨텍스트를 설명하십시오. 가능하다면 재현 가능한 예, 즉 다른 사람이 실행할 수 있는 오류 메시지를 일으키는 코드 조각을 게시하십시오. 이렇게 하면 다른 사람들이 당신을 더 쉽게 도울 수 있습니다. 버전 번호 외에도 R의 각 릴리스에는 Charles Schulz의 Peanuts 만화를 참조하는 별명이 있습니다. R 4.1.0의 “Camp Pontanezen” 별명은 1986년 2월 12일의 Peanuts 만화를 참조한 것입니다.↩︎ 조작이라는 단어는 다른 의미를 가지고 있습니다. 확실히 하자면, 내가 이 책에서 데이터 조작에 대해 말할 때마다, 나는 데이터를 변조하는 것이 아니라 데이터를 다루고 변환하는 것을 의미할 것입니다.↩︎ I.e. 콘솔 패널이 활성화되고 그 안에 깜박이는 텍스트 커서가 표시될 때.↩︎ If you are used to programming languages like C or Java, you should note that R is dynamically typed, meaning that the data type of an R variable also can change over time. This also means that there is no need to declare variable types in R (which is either liberating or terrifying, depending on what type of programmer you are).↩︎ RStudio에서 키보드 단축키 Alt+-를 사용하여 할당 연산자 &lt;-를 만들 수도 있습니다(즉, Alt와 - 버튼을 동시에 누름).↩︎ 특히, 마침표는 객체 지향 프로그래밍에서 메서드와 클래스를 구분하는 데 사용되며, 이는 R에서 매우 중요합니다(이를 깨닫지 못한 채 몇 년 동안 R을 사용할 수 있지만).↩︎ 이미 명확하지 않은 경우를 대비하여 snake_case 또는 camelCase를 권장합니다.↩︎ 제1사분위수는 관측값의 25%가 이보다 작은 값입니다. 3사분위수는 관측값의 25%가 그것보다 큰 값입니다.↩︎ 이 경우 too much는 상자의 가장자리에서 상자 높이의 1.5배 이상 떨어진 것을 의미합니다.↩︎ 개인적으로 윤곽선 없이 히스토그램을 그리는 사람이 왜 있는지 모르겠습니다!↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
