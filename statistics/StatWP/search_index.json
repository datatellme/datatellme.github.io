[["index.html", "Biz Statistic With Python Step by Step Welcome", " Biz Statistic With Python Step by Step sinamp 2023-02-07 Welcome This is the online version of the book Biz Statistic With Python. It is free to use "],["파이썬-기초.html", "1 파이썬 기초 1.1 파이썬 프로그램 기초 1.2 데이터 분석을 위한 파이썬 라이브러리", " 1 파이썬 기초 학습 목표 1. 파이썬을 사용하는 이유를 알 수 있습니다. 2. 파이썬의 기초적를 알 수 있습니다. 3. 파이썬의 라이브러리를 사용할 수 있습니다. 1.1 파이썬 프로그램 기초 1.1.1 파이썬의 자료형 1.1.1.1 숫자형과 문자형 a = 123 b = &#39;abc&#39; print(type(a), type(b)) ## &lt;class &#39;int&#39;&gt; &lt;class &#39;str&#39;&gt; 1.1.1.2 리스트, 튜플, 딕셔너리 #리스트 생성 List = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] #튜플 생성 Tuple = (1, 2, 3, 4) #딕셔너리 생성 Dic = {&#39;경기도&#39;:&#39;일산&#39;, &#39;강원도&#39;:&#39;원주&#39;, &#39;충청도&#39;:&#39;천안&#39;, &#39;전라도&#39;:&#39;전주&#39;} print(type(List), type(Tuple), type(Dic)) ## &lt;class &#39;list&#39;&gt; &lt;class &#39;tuple&#39;&gt; &lt;class &#39;dict&#39;&gt; 1.1.2 파이썬 제어문 1.1.2.1 if 문 point = 20 if point &gt;= 60: print(&#39;vip&#39;) else: print(&#39;member&#39;) ## member 1.1.2.2 for 문 for a in [1, 2, 3, 4, 5]: print(a) ## 1 ## 2 ## 3 ## 4 ## 5 for b in range(1, 10, 2): print(b) ## 1 ## 3 ## 5 ## 7 ## 9 1.1.2.3 while 문 #1. 초기화 customer_count = 0 sum1 = 0 print(&#39;customer_count sum&#39;) #2. 조건 검사 ## customer_count sum while (sum1 &lt; 20): customer_count = customer_count + 1 sum1 = sum1 + customer_count print(customer_count, sum1) ## 1 1 ## 2 3 ## 3 6 ## 4 10 ## 5 15 ## 6 21 1.2 데이터 분석을 위한 파이썬 라이브러리 1.2.1 통계분석을 위한 라이브러리 import pandas as pd from matplotlib import pyplot as plt from pandas import DataFrame 1.2.2 NumPy 1.2.2.1 배열 생성하기 import numpy as np data1 = [0, 1, 2, 3, 4 ,5] a1 = np.array(data1) a1 ## array([0, 1, 2, 3, 4, 5]) a1.dtype ## dtype(&#39;int32&#39;) #1. 1부터 10까지 범위 안에서 간격 2를 갖는 배열 생성 a1 = np.arange(start = 1, stop = 10, step =2) print(a1) #2. 0부터 10까지 범위 안에서 간격 1을 갖는 배열 생성 ## [1 3 5 7 9] a2= np.arange(10) print(a2) ## [0 1 2 3 4 5 6 7 8 9] 1.2.2.2 배열 연산하기 import numpy as np arr1 = np.array([10, 15, 20, 30]) arr2 = np.array([1, 1, 2, 3]) print(&#39;----------덧셈----------&#39;) ## ----------덧셈---------- print(arr1+arr2) ## [11 16 22 33] print(&#39;----------뺄셈----------&#39;) ## ----------뺄셈---------- print(arr1-arr2) ## [ 9 14 18 27] print(&#39;----------곱셈----------&#39;) ## ----------곱셈---------- print(arr1*arr2) ## [10 15 40 90] print(&#39;----------나눗셈--------&#39;) ## ----------나눗셈-------- print(arr1/arr2) ## [10. 15. 10. 10.] 1.2.2.3 배열의 인덱싱과 슬라이싱 인덱싱 (Indexing) import numpy as np a1 = np.array([0, 10, 20, 30, 40, 50]) a1 ## array([ 0, 10, 20, 30, 40, 50]) a1[4] ## 40 a1[5] = 70 a1 ## array([ 0, 10, 20, 30, 40, 70]) a1[[1,3,4]] ## array([10, 30, 40]) 슬라이싱 (Slicing) import numpy as np b1 = np.array([0, 1, 2, 3, 4, 5]) b1 ## array([0, 1, 2, 3, 4, 5]) b1[1:4] ## array([1, 2, 3]) b1[2:] ## array([2, 3, 4, 5]) b1[2:5] = np.array([25, 35, 45]) b1 ## array([ 0, 1, 25, 35, 45, 5]) 1.2.2.4 배열의 차원 변경하기 import numpy as np Vector = np.arange(10) Matrix = Vector.reshape(2,5) Matrix ## array([[0, 1, 2, 3, 4], ## [5, 6, 7, 8, 9]]) Vector = np.arange(10) Matrix = Vector.reshape(-1 , 5) Matrix ## array([[0, 1, 2, 3, 4], ## [5, 6, 7, 8, 9]]) 1.2.3 Pandas 1.2.3.1 Pandas의 자료구조 Series import pandas as pd series = pd.Series([1, 2, 3, 4, 5]) series ## 0 1 ## 1 2 ## 2 3 ## 3 4 ## 4 5 ## dtype: int64 DataFrame import pandas as pd columns_list = [&#39;고객이름&#39;, &#39;나이&#39;, &#39;등급&#39;] value_list = [[&#39;원종호&#39;, 26, &#39;Silver&#39;], [&#39;김수현&#39;, 23, &#39;Gold&#39;], [&#39;김진표&#39;, 30, &#39;Vip&#39;]] pd.DataFrame(data = value_list, columns = columns_list) ## 고객이름 나이 등급 ## 0 원종호 26 Silver ## 1 김수현 23 Gold ## 2 김진표 30 Vip import pandas as pd dict = {&#39;고객이름&#39; : [&#39;원종호&#39;,&#39;김수현&#39;,&#39;김진표&#39;], &#39;나이&#39; : [26,23,30], &#39;등급&#39; : [&#39;Silver&#39;,&#39;Gold&#39;,&#39;Vip&#39;]} pd.DataFrame(data = dict) ## 고객이름 나이 등급 ## 0 원종호 26 Silver ## 1 김수현 23 Gold ## 2 김진표 30 Vip 1.2.3.2 Pandas를 이용한 기초통계 import pandas as pd sales_data = {&#39;화장품&#39;: [300, 274, 150, 524, 211], &#39;의류&#39;: [773, 657, 699, 324, 487], &#39;식음료&#39;: [362, 131, 593, 348, 98], &#39;전자제품&#39;: [458, 667, 123, 521, 662]} index_list = [&#39;2014&#39;, &#39;2015&#39;, &#39;2016&#39;, &#39;2017&#39;, &#39;2018&#39;] df_store = pd.DataFrame(data = sales_data, index = index_list) df_store ## 화장품 의류 식음료 전자제품 ## 2014 300 773 362 458 ## 2015 274 657 131 667 ## 2016 150 699 593 123 ## 2017 524 324 348 521 ## 2018 211 487 98 662 #평균 출력 print(df_store.mean()) #표준편차 출력 ## 화장품 291.8 ## 의류 588.0 ## 식음료 306.4 ## 전자제품 486.2 ## dtype: float64 print(df_store.std()) ## 화장품 142.246968 ## 의류 181.110464 ## 식음료 200.721947 ## 전자제품 222.213186 ## dtype: float64 print((df_store.mean(axis=1))) ## 2014 473.25 ## 2015 432.25 ## 2016 391.25 ## 2017 429.25 ## 2018 364.50 ## dtype: float64 df_store.describe( ) ## 화장품 의류 식음료 전자제품 ## count 5.000000 5.000000 5.000000 5.000000 ## mean 291.800000 588.000000 306.400000 486.200000 ## std 142.246968 181.110464 200.721947 222.213186 ## min 150.000000 324.000000 98.000000 123.000000 ## 25% 211.000000 487.000000 131.000000 458.000000 ## 50% 274.000000 657.000000 348.000000 521.000000 ## 75% 300.000000 699.000000 362.000000 662.000000 ## max 524.000000 773.000000 593.000000 667.000000 1.2.3.3 DataFrame에서 원하는 데이터 추출 import pandas as pd import numpy as np dep_data = {&#39;명동점&#39;: [59060, 49296, 62015, 48621, 46712, 31216, 38467], &#39;분당점&#39;: [9312, 1267, 6893, 7226, 8878, 13622, 18228], &#39;광주점&#39;: [2627, 4145, 4088, 4321, 4679, 4994, 5544], &#39;부산점&#39;: [14211, 11071, 11234, 15424, 12146, 39415, 57866], &#39;송도점&#39;: [np.nan,np.nan, 9912, 9224, 8395, 9786, 9667]} index_list = [&#39;2011&#39;, &#39;2012&#39;, &#39;2013&#39;, &#39;2014&#39;, &#39;2015&#39;, &#39;2016&#39;, &#39;2017&#39;] df_store = pd.DataFrame(dep_data, index = index_list) df_store ## 명동점 분당점 광주점 부산점 송도점 ## 2011 59060 9312 2627 14211 NaN ## 2012 49296 1267 4145 11071 NaN ## 2013 62015 6893 4088 11234 9912.0 ## 2014 48621 7226 4321 15424 9224.0 ## 2015 46712 8878 4679 12146 8395.0 ## 2016 31216 13622 4994 39415 9786.0 ## 2017 38467 18228 5544 57866 9667.0 df_store[0:2] ## 명동점 분당점 광주점 부산점 송도점 ## 2011 59060 9312 2627 14211 NaN ## 2012 49296 1267 4145 11071 NaN df_store.loc[&#39;2016&#39;] ## 명동점 31216.0 ## 분당점 13622.0 ## 광주점 4994.0 ## 부산점 39415.0 ## 송도점 9786.0 ## Name: 2016, dtype: float64 df_store[&#39;명동점&#39;] ## 2011 59060 ## 2012 49296 ## 2013 62015 ## 2014 48621 ## 2015 46712 ## 2016 31216 ## 2017 38467 ## Name: 명동점, dtype: int64 df_store[&#39;명동점&#39;][&#39;2013&#39;:&#39;2015&#39;] ## 2013 62015 ## 2014 48621 ## 2015 46712 ## Name: 명동점, dtype: int64 "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
